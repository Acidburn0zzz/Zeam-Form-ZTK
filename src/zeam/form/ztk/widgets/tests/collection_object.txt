================================================
zeam.form.ztk object widget used in a collection
================================================

We need an interface that defines a list of objects, and an
implementation::

  >>> import datetime
  >>> from zope import schema, interface

  >>> class IProgram(interface.Interface):
  ...     name = schema.TextLine(title=u"Name")
  ...     location = schema.TextLine(title=u"Where")
  ...     date = schema.Date(title=u"When", required=False)

  >>> class IProgramSelection(interface.Interface):
  ...     programs = schema.List(title=u"Program selection",
  ...                            value_type=schema.Object(schema=IProgram),
  ...                            required=True)

  >>> class Program(object):
  ...      interface.implements(IProgram)
  ...      def __init__(self, name=None, location=None, date=None):
  ...           self.name = name
  ...           self.location = location
  ...           self.date = date

  >>> class Selection(object):
  ...      interface.implements(IProgramSelection)
  ...      def __init__(self, programs=[]):
  ...           self.programs = list(programs)

  >>> content = Selection([Program(u'TV', u'at my place', datetime.date(2001, 6, 23))])


Field
-----

You can create a field::

  >>> from zeam.form.ztk import Fields

  >>> fields = Fields(IProgramSelection)
  >>> field = fields['programs']
  >>> field
  <ListSchemaField Program selection>

  >>> field.required
  True

  >>> value_field = field.valueField
  >>> value_field
  <ObjectSchemaField >


Validation
~~~~~~~~~~

The field can only validate a list of correctly build objects::

  >>> from zeam.form.base.markers import NO_VALUE
  >>> field.validate(NO_VALUE)
  u'Missing required value.'
  >>> field.validate([])
  u'Missing required value.'
  >>> field.validate([1, 2, 3])
  u'Wrong contained type'

  >>> field.validate([Program(u'TV', u'at my place'),
  ...                 Program(u'Rock', u'in the street'),
  ...                 Program(u'Manga', u'at his place')])


Widget
------

You can get a dedicated widget for your list of programs::

  >>> from zeam.form.ztk import Widgets, FormData
  >>> from zope.publisher.browser import TestRequest
  >>> from zeam.form.base import interfaces
  >>> from zope.interface.verify import verifyObject

  >>> request = TestRequest()
  >>> form = FormData(content, request)
  >>> form.ignoreContent = False

  >>> widgets = Widgets(fields, form=form, request=request)
  >>> widgets.update()
  >>> widget = widgets['form.field.programs']
  >>> widget
  <ListObjectFieldWidget Program selection>

  >>> verifyObject(interfaces.IFieldWidget, widget)
  True

You can add and remove values, and have already a value::

  >>> widget.allowAdding
  True
  >>> widget.allowRemove
  True
  >>> list(widget.valueWidgets)
  [<ObjectFieldWidget form.field.programs.field.0>]

  >>> map(lambda w: list(w.objectWidgets), widget.valueWidgets)
  [[<TextLineWidget Name>, <TextLineWidget Where>, <DateFieldWidget When>]]
  >>> map(lambda w: map(lambda x: x.value, w.objectWidgets), widget.valueWidgets)
  [[{'form.field.programs.field.0.field.name': u'TV'},
    {'form.field.programs.field.0.field.location': u'at my place'},
    {'form.field.programs.field.0.field.date': u'01/06/23'}]]

Getting input from the request
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can extract information from the request.

  >>> programs_request = TestRequest(form={
  ...     'form.field.programs': u'2',
  ...     'form.field.programs.present.0': u'1',
  ...     'form.field.programs.field.0.name': u'Manga',
  ...     'form.field.programs.field.0.location': u'Mangashop',
  ...     'form.field.programs.present.1': u'1',
  ...     'form.field.programs.field.1.name': u'TV',
  ...     'form.field.programs.field.1.location': u'at my place',
  ...     'form.field.programs.field.1.date': u'10/06/23'})

  >>> programs_form = FormData(content, programs_request)

  >>> programs_widgets = Widgets(
  ...     fields,
  ...     form=programs_form,
  ...     request=programs_request)
  >>> programs_widgets.update()
  >>> programs_widget = programs_widgets['form.field.programs']

  >>> list(programs_widget.valueWidgets)
  [<ObjectFieldWidget form.field.programs.field.0>,
   <ObjectFieldWidget form.field.programs.field.1>]

  >>> map(lambda w: list(w.objectWidgets), programs_widget.valueWidgets)
  [[<TextLineWidget Name>, <TextLineWidget Where>, <DateFieldWidget When>],
   [<TextLineWidget Name>, <TextLineWidget Where>, <DateFieldWidget When>]]
  >>> map(lambda w: map(lambda x: x.value, w.objectWidgets), programs_widget.valueWidgets)
  [[{'form.field.programs.field.0.field.name': u'Manga'},
    {'form.field.programs.field.0.field.location': u'Mangashop'},
    {'form.field.programs.field.0.field.date': u''}],
   [{'form.field.programs.field.1.field.name': u'TV'},
    {'form.field.programs.field.1.field.location': u'at my place'},
    {'form.field.programs.field.1.field.date': u'10/06/23'}]]
